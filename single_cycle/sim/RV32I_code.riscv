// 加载数据到寄存器
lui x2, 0x1234
lw x3, 0(x0)         // x3 = F0000000
lw x4, 4(x0)         // x4 = 000002AB
lw x5, 8(x0)         // x5 = 80000000
lw x6, 12(x0)        // x6 = 0000003F

// 算术运算指令
add x7, x3, x4       // x7 = F0002BAB
sub x8, x3, x4       // x8 = eFFFFd55
and x9, x3, x4       // x9 = 00000000
or x10, x3, x4       // x10 = F00002AB
xor x11, x3, x4      // x11 = F00002AB
slli x12, x3, 1       // x12 = E0000000
srli x13, x3, 1       // x13 = 78000000
srai x14, x3, 1       // x14 = F8000000
slt x15, x3, x4      // x15 = 00000001
// 分支跳转指令
beq x3, x4, 8        // 跳转到label1
bne x3, x4, 8        
label1:
    addi x3, x3, 1   // x3 = F0000001
label2:
    ori x4, x4, 1    // x4 = 000002AB

// 存储数据到内存
sw x3, 16(x0)        // 写入 F0000001 到内存地址 16
sw x4, 20(x0)        // 写入 000002AC 到内存地址 20
// 检查内存
lw x16, 16(x0)
lw x17, 20(x0)

// 跳转指令
jal x0, 4       // 跳转到 label3
label3:

// 系统调用指令
// li a0, 1             // 设置系统调用参数
lui a0, 0x0        // 将立即数高位加载到 a0 的高位
ori a0, a0, 0x1    // 将立即数低位加载到 a0 的低位
// li a7, 93            // 设置系统调用号（退出程序）
lui a7, 0x0        // 将立即数高位加载到 a7 的高位
ori a7, a7, 0x5D   // 将立即数低位加载到 a7 的低位

ecall                // 执行系统调用